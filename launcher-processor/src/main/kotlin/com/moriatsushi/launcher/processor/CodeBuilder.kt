package com.moriatsushi.launcher.processor

import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import org.intellij.lang.annotations.Language

internal class CodeBuilder {
    @Language("kotlin")
    fun buildDefaultActivity(functionName: String): String {
        return """
        // generated by jetpack compose launcher

        package com.moriatsushi.launcher

        import android.os.Bundle
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent

        class DefaultComposeActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)

                setContent {
                    $functionName()
                }
            }
        }
        """.trimIndent()
    }

    @Language("kotlin")
    fun buildOtherActivity(functionNames: List<String>): String {
        return """
        // generated by jetpack compose launcher

        package com.moriatsushi.launcher

        import android.os.Bundle
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent

        class ComposeActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)

                val destination = intent.getStringExtra("launcher_destination")

                setContent {
                    when (destination) {
        ${buildDestinations(functionNames).prependIndent("                ")}
                    }
                }
            }
        }
        """.trimIndent()
    }

    @Language("kotlin")
    private fun buildDestinations(functionNames: List<String>): String {
        return functionNames.joinToString("\n") {
            "\"$it\" -> $it()"
        }
    }

    @Language("kotlin")
    fun buildLauncher(
        function: KSFunctionDeclaration,
        isDefault: Boolean,
    ): String {
        val simpleName = function.simpleName.asString()
        val qualifiedName = function.qualifiedName?.asString()
            ?: error("require qualifiedName")

        val activityName = if (isDefault) "DefaultComposeActivity" else "ComposeActivity"

        return """
        // generated by jetpack compose launcher

        package ${function.packageName.asString()}

        import android.content.Intent
        import androidx.compose.runtime.Composable
        import androidx.compose.runtime.remember
        import androidx.compose.ui.platform.LocalContext
        import com.moriatsushi.launcher.$activityName

        @Composable
        fun remember${simpleName}Launcher(): ${simpleName}Launcher {
            val context = LocalContext.current
            return remember {
                object : ${simpleName}Launcher {
                    override fun launch() {
                        val intent = Intent(context, ${activityName}::class.java)
                        ${if (!isDefault) "intent.putExtra(\"launcher_destination\", \"$qualifiedName\")" else ""}
                        context.startActivity(intent)
                    }
                }
            }
        }

        interface ${simpleName}Launcher {
            fun launch()
        }
        """.trimIndent()
    }
}
