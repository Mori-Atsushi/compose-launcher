package com.moriatsushi.launcher.processor

import org.intellij.lang.annotations.Language

internal class CodeBuilder {
    @Language("kotlin")
    fun buildDefaultActivity(function: FunctionNames): String {

        return """
        // generated by jetpack compose launcher

        package ${function.packageName}

        import android.os.Bundle
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent

        class DefaultComposeActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)

                setContent {
                    ${function.qualifiedName}()
                }
            }
        }
        """.trimIndent()
    }

    @Language("kotlin")
    fun buildOtherActivity(functions: List<FunctionNames>): String {
        return """
        // generated by jetpack compose launcher

        package ${functions.firstOrNull()?.packageName.orEmpty()}

        import android.os.Bundle
        import androidx.activity.ComponentActivity
        import androidx.activity.compose.setContent

        class ComposeActivity : ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)

                val destination = intent.getStringExtra("launcher_destination")

                setContent {
                    when (destination) {
        ${buildDestinations(functions).prependIndent("                ")}
                    }
                }
            }
        }
        """.trimIndent()
    }

    @Language("kotlin")
    private fun buildDestinations(functions: List<FunctionNames>): String {
        return functions.joinToString("\n") {
            "\"${it.qualifiedName}\" -> ${it.qualifiedName}()"
        }
    }

    @Language("kotlin")
    fun buildLauncher(
        function: FunctionNames,
        isDefault: Boolean,
    ): String {
        val launcherName = "${function.simpleName}Launcher"
        val activityName = if (isDefault) "DefaultComposeActivity" else "ComposeActivity"

        return """
        // generated by jetpack compose launcher

        package ${function.packageName}

        import android.content.Context
        import android.content.Intent
        import androidx.compose.runtime.Composable
        import androidx.compose.runtime.remember
        import androidx.compose.ui.platform.LocalContext
        import ${function.packageName}.$activityName

        @Composable
        fun remember$launcherName(): $launcherName {
            val context = LocalContext.current
            return remember { get$launcherName(context) }
        }

        fun get$launcherName(context: Context): $launcherName {
            return $launcherName {
                val intent = Intent(context, $activityName::class.java)
                ${if (!isDefault) "intent.putExtra(\"launcher_destination\", \"${function.qualifiedName}\")" else ""}
                context.startActivity(intent)
            }
        }

        fun interface $launcherName {
            fun launch()
        }
        """.trimIndent()
    }
}
